buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.4.0"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: "com.android.library"
apply plugin: "maven-publish"

android {
    namespace "net.simno.dmach.externals"
    compileSdkVersion 33
    ndkVersion "25.1.8937393"
    defaultConfig {
        minSdkVersion 28
        targetSdkVersion 33
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14"
                arguments "-DANDROID_STL=c++_static"
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
        }
    }
    externalNativeBuild {
        cmake {
            version "3.22.1"
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    packagingOptions {
        exclude "lib/armeabi-v7a/libpd.so"
        exclude "lib/arm64-v8a/libpd.so"
        exclude "lib/x86/libpd.so"
        exclude "lib/x86_64/libpd.so"
    }
    buildFeatures {
        buildConfig false
    }
}

def siteUrl = "https://github.com/simonnorberg/dmach-externals"
def gitUrl = "https://github.com/simonnorberg/dmach-externals.git"

group = "net.simno.dmach"
version = "2.0.0"

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId = "net.simno.dmach"
                artifactId = "dmach-externals"
                version = "2.0.0"

                pom {
                    name = "dmach-externals"
                    url = siteUrl
                    licenses {
                        license {
                            name = "BSD New"
                            url = "https://raw.githubusercontent.com/simonnorberg/pd-miXedSon/master/LICENSE.txt"
                        }
                        license {
                            name = "GPL-2.0"
                            url = "https://git.iem.at/pd/zexy/raw/master/LICENSE.txt"
                        }
                    }
                    scm {
                        connection = gitUrl
                        developerConnection = gitUrl
                        url = siteUrl
                    }
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    setArchiveClassifier("sources")
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    setArchiveClassifier("javadoc")
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
